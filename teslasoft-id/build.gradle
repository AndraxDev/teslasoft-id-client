plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
}

def artifactId0 = 'teslasoft-id'
def ossrhUsername = "<OSSRH username has been obfuscated>"
def ossrhPassword = "<OSSRH password has been obfuscated>"
def signingKey = "<Secret key has been obfuscated>"
def signingKeyPwd = "<Secret key passcode has been obfuscated>"

group = "org.teslasoft.core.auth"
version = "1.2.0"

android {
    namespace 'org.teslasoft.core.auth'
    compileSdk 33

    defaultConfig {
        minSdk 28
        targetSdk 33
        versionCode 7
        versionName "1.2.0"

        aarMetadata {
            minCompileSdk = 28
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    testFixtures {
        enable = true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.9.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    implementation 'com.google.code.gson:gson:2.10.1'
}

task javadoc(type: Javadoc) {
    doFirst {
        configurations.implementation
                .filter { it.name.endsWith('.aar') }
                .each { aar ->
                    copy {
                        from zipTree(aar)
                        include "**/classes.jar"
                        into "$buildDir/tmp/aarsToJars/${aar.name.replace('.aar', '')}/"
                    }
                }
    }

    configurations.implementation.setCanBeResolved(true)
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")
    destinationDir = file("${project.buildDir}/outputs/javadoc/")
    failOnError false
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    doNotTrackState("")
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = group
                artifactId = artifactId0
                version = version

                artifact androidSourcesJar
                artifact javadocJar

                pom {
                    name = artifactId
                    description = 'This library enable you to authenticate users through Teslasoft ID. Also this library can help you to personalize user experience by saving app\'s settings into Teslasoft ID account and syncing it between multiple devices.'
                    url = 'https://github.com/AndraxDev/teslasoft-id-client'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'andrax'
                            name = 'AndraxDev'
                            email = 'dostapenko82@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/AndraxDev/teslasoft-id-client.git'
                        developerConnection = 'scm:git:ssh://github.com/AndraxDev/teslasoft-id-client.git'
                        url = 'https://github.com/AndraxDev/teslasoft-id-client'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "sonatype"

                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(signingKey, signingKeyPwd)
    sign publishing.publications
}